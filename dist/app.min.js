/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__less_main_less__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__less_main_less___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__less_main_less__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Modal_js__ = __webpack_require__(2);


// import Datepicker from './Datepicker.js';

//******************************************************
//******************** Quote Options *******************
//******************************************************

const fromTextField = document.querySelector('.from-textfield');
const fromText = fromTextField.querySelector('.text');
const fromList = document.querySelector('.from-list');
const toTextField = document.querySelector('.to-textfield');
const toText = toTextField.querySelector('.text');
const toList = document.querySelector('.to-list');
const listItems = document.querySelectorAll('.getQuotes li');

showList(fromTextField, fromList, toList);
showList(toTextField, toList, fromList);
selectItem(listItems);

function showList(trigger, listToShow, listToCheck) {
	trigger.addEventListener('click', function() {
		listToShow.classList.toggle('show');
		listToCheck.classList.contains('show') ? listToCheck.classList.remove('show') : null;
	});
}

function selectItem(items) {
	items.forEach(item =>
		item.addEventListener('click', function() {
			if (fromList.classList.contains('show')) {
				fromText.innerHTML = this.innerHTML;
				fromList.classList.remove('show');
			} else {
				toText.innerHTML = this.innerHTML;
				toList.classList.remove('show');
			}
		})
	);
}

//******************************************************
//******************** Interactive Tab *****************
//******************************************************

const dots = document.querySelectorAll('.dot');
const carousels = document.querySelectorAll('.carousel');

dots.forEach(dot =>
	dot.addEventListener('click', function() {
		carousels.forEach(carousel => {
			carousel.classList.contains('active') ? carousel.classList.remove('active') : null;
			carousel.dataset.item === this.dataset.item ? carousel.classList.add('active') : null;
		});
		dots.forEach(dot => {
			dot.classList.contains('active') ? dot.classList.remove('active') : null;
		});
		this.classList.add('active');
	})
);

//******************************************************
//******************** Modal ***************************
//******************************************************

const privacyLink = document.querySelector('#privacyLink');
const modal = document.querySelector('#modal');
const overlay = document.querySelector('.overlay');
const times = document.querySelector('.fa-times');

times.addEventListener('click', () => document.body.classList.remove('active'));

privacyLink.addEventListener('click', e => {
	console.log('hell0');
	e.preventDefault();
	document.body.classList.add('active');
	overlay.addEventListener('click', () => {
		document.body.classList.remove('active');
	});
});

// const settingsBtn = document.querySelector('.heading__settings-icon');
// const settingsChoice = document.querySelector('.settings-choice');
// const timeButton = document.querySelector('.icons--time');
// const dateButton = document.querySelector('.icons--date');
// const timepickers = document.querySelector('.timepickers');
// const datepicker = document.querySelector('.datepicker');

// const TIMEPICKER = new Timepicker({
// 	target : '.timepickers'
// });
// const DATEPICKER = new Datepicker({
// 	target: '.datepicker'
// });

// const showElement = Timepicker.prototype.showElement;

// timeButton.addEventListener('click', function(){
// 	showElement(timepickers, "show-timepickers", this, "icons--time--active")
// 	showElement(settingsChoice, "settings-choice-show", settingsBtn, "settings-icon-active")
// 	datepicker.classList.contains("show-datepicker") ? showElement(datepicker, "show-datepicker", dateButton, "icons--date--active") : null
// });
// dateButton.addEventListener('click', function(){
// 	showElement(datepicker, "show-datepicker", this, "icons--date--active")
// 	showElement(settingsChoice, "settings-choice-show", settingsBtn, "settings-icon-active")
// 	timepickers.classList.contains("show-timepickers") ? showElement(timepickers, "show-timepickers", timeButton, "icons--time--active") : null
// });
// settingsBtn.addEventListener("click", function(){showElement(settingsChoice, "settings-choice-show", this, "settings-icon-active")});


/***/ }),
/* 1 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Modal {
	constructor(args) {
		this.target = args.target;
		this._renderWidget();

		this._main();
	}

	showElement(element, classNameEl, button, classNameBtn) {
		element.classList.toggle(classNameEl);
		button.classList.toggle(classNameBtn);
	}

	_main() {
		// this.hoursTable.innerHTML = this.populateTable(this.hours);
		// this.minutesTable.innerHTML = this.populateTable(this.minutes);
		// this.timeList.innerHTML = this.populateList(this.hours, this.quaterHours, this.ampm.innerHTML);
		// const tableElementHours = this.hoursTable.querySelectorAll('.table__element')		//these needs to be declared here because in constructor it is not populated yet
		// const tableElementMinutes = this.minutesTable.querySelectorAll('.table__element')
		// let listItems = this.timeList.querySelectorAll('li');
		// this.timeWrapper.addEventListener('mouseenter', () => this.carets.forEach(caret => caret.classList.add('show-carets')))
		// this.timeWrapper.addEventListener('mouseleave', () => this.carets.forEach(caret => caret.classList.remove('show-carets')))
		// this.showTimeBtn.addEventListener("click", ()=>{
		// 	this.showElement(this.timeGrid, "show-me", this.showTimeBtn, "body__style--icon--active")
		// 	this.downCaretBtn.classList.contains("body__style--caret--active") ? this.showElement(this.timeList, "show-me", this.downCaretBtn, "body__style--caret--active") : null;
		// });
		// this.ampmSelector.addEventListener("click", () => {
		// 	this.ampm.innerHTML === "AM" ? this.ampm.innerHTML = "PM" : this.ampm.innerHTML = "AM"
		// 	this.timeList.innerHTML = this.populateList(this.hours, this.quaterHours, this.ampm.innerHTML);
		// 	listItems = this.timeList.querySelectorAll('li');
		// 	this.addListeners(listItems, tableElementHours, tableElementMinutes);
		// });
		// this.downCaretBtn.addEventListener("click", () => {
		// 	this.showElement(this.timeList, "show-me", this.downCaretBtn, "body__style--caret--active")
		// 	this.showTimeBtn.classList.contains("body__style--icon--active") ? this.showElement(this.timeGrid, "show-me", this.showTimeBtn, "body__style--icon--active") : null;
		// });
		// tableElementHours.forEach(hour => hour.addEventListener('click', () => {
		// 	this.changeTimeFromTable(this.hoursDisplay, tableElementHours, hour);
		// }))
		// tableElementMinutes.forEach(minute => minute.addEventListener('click', () => {
		// 	this.changeTimeFromTable(this.minutesDisplay, tableElementMinutes, minute);
		// }))
		// this.addListeners(listItems, tableElementHours, tableElementMinutes);
		// this.carets.forEach(caret => caret.addEventListener('click', () => {
		// 	const hourNumber = +this.hoursDisplay.innerHTML;
		// 	const minuteNumber = +this.minutesDisplay.innerHTML;
		// 	tableElementHours.forEach(time => time.classList.contains("time--active") ? time.classList.remove('time--active') : null)
		// 	tableElementMinutes.forEach(time => time.classList.contains("time--active") ? time.classList.remove('time--active') : null)
		// 	if("updatehour" in caret.dataset){
		// 		let updatingHour = hourNumber + parseFloat(caret.dataset.updatehour);
		// 		updatingHour > 12 ? updatingHour = 1 : null;
		// 		updatingHour < 1 ? updatingHour = 12 : null;
		// 		this.hoursDisplay.innerHTML = this.addZero(updatingHour);
		// 	}else{
		// 		let updatingMinute = minuteNumber + parseFloat(caret.dataset.updatemin);
		// 		updatingMinute > 55 ? updatingMinute = 0 : null;
		// 		updatingMinute < 0 ? updatingMinute = 55 : null;
		// 		this.minutesDisplay.innerHTML = this.addZero(updatingMinute);
		// 	}
		// }))
	}

	_renderWidget() {
		let target = document.querySelector(this.target);
		target.innerHTML = `
		
	      <div class="timepickers__default">
	        <div class="default__heading">Default</div>
	        <div class="default__body">
	          
	            <div class="body__style body__style--icon"><i class="fa fa-clock-o" aria-hidden="true"></i></div>
	            <div class="time-wrapper">
	              <div class="body__style body__style--hours">
	                <div class="hour-num">12</div>
	                <i class="hover-carets fa fa-angle-up" data-updatehour="1" aria-hidden="true"></i>
	                <i class="hover-carets fa fa-angle-down" data-updatehour="-1" aria-hidden="true"></i>
	              </div>
	              <div class="body__style body__style--collon">:</div>
	              <div class="body__style body__style--minutes">
	                <div class="minute-num">00</div>
	                <i class="hover-carets fa fa-angle-up" data-updatemin="5" aria-hidden="true"></i>
	                <i class="hover-carets fa fa-angle-down" data-updatemin="-5" aria-hidden="true"></i>
	              </div>
	            </div>            
	            <div class="body__style body__style--caret"><i class="fa fa-caret-down" aria-hidden="true"></i></div>
	            
	          
	          
	          <div class="body__style body__style--ampm">
	            <div class="ampm">AM</div>
	            <div class="ampm-selector"><i class="fa fa-refresh" aria-hidden="true"></i></div>
	          </div>
	        </div>
	        <div class="select-time-list">
	              
	          <ul class="fill-me-up"></ul>
	        </div>
	        <div class="default__time-grid">
	          <div class="time-grid-heading">HOURS</div>
	          <hr class="line-break">
	          <div class="time-grid-table table--hours">
	            
	          </div>
	          <div class="time-grid-heading">MINUTES</div>
	          <hr class="line-break">
	          <div class="time-grid-table table--minutes">
	            
	          </div>
	        </div>
	          
	        
	      </div>
	    

		`;
	}
}
/* unused harmony export default */



/***/ })
/******/ ]);