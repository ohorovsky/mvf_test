/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__less_main_less__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__less_main_less___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__less_main_less__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Timepicker_js__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Datepicker_js__ = __webpack_require__(3);





const settingsBtn = document.querySelector('.heading__settings-icon');
const settingsChoice = document.querySelector('.settings-choice');
const timeButton = document.querySelector('.icons--time');
const dateButton = document.querySelector('.icons--date');
const timepickers = document.querySelector('.timepickers');
const datepicker = document.querySelector('.datepicker');

const TIMEPICKER = new __WEBPACK_IMPORTED_MODULE_1__Timepicker_js__["a" /* default */]({
	target : '.timepickers'	
});
const DATEPICKER = new __WEBPACK_IMPORTED_MODULE_2__Datepicker_js__["a" /* default */]({
	target: '.datepicker'
});

const showElement = __WEBPACK_IMPORTED_MODULE_1__Timepicker_js__["a" /* default */].prototype.showElement;

timeButton.addEventListener('click', function(){
	showElement(timepickers, "show-timepickers", this, "icons--time--active")
	showElement(settingsChoice, "settings-choice-show", settingsBtn, "settings-icon-active")
	datepicker.classList.contains("show-datepicker") ? showElement(datepicker, "show-datepicker", dateButton, "icons--date--active") : null
});
dateButton.addEventListener('click', function(){
	showElement(datepicker, "show-datepicker", this, "icons--date--active")
	showElement(settingsChoice, "settings-choice-show", settingsBtn, "settings-icon-active")
	timepickers.classList.contains("show-timepickers") ? showElement(timepickers, "show-timepickers", timeButton, "icons--time--active") : null
});
settingsBtn.addEventListener("click", function(){showElement(settingsChoice, "settings-choice-show", this, "settings-icon-active")});


/***/ }),
/* 1 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Timepicker{
	constructor(args){
		this.target = args.target;
		this._renderWidget();
		this.showTimeBtn = document.querySelector('.default__body .body__style--icon');
		this.timeGrid = document.querySelector('.timepickers .default__time-grid');
		this.timepickers = document.querySelector('.timepickers');
		this.timeList = document.querySelector('.fill-me-up');
		this.downCaretBtn = document.querySelector('.body__style--caret');
		this.ampmSelector = document.querySelector('.ampm-selector');
		this.ampm = document.querySelector('.ampm');

		this.hours = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
		this.minutes = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55];
		this.hoursTable = document.querySelector('.table--hours');

		this.minutesTable = document.querySelector('.table--minutes');
		this.timeWrapper = document.querySelector('.time-wrapper');
		this.carets = document.querySelectorAll('.hover-carets');
		

		this.quaterHours = [0, 15, 30, 45];

		this.hoursDisplay = document.querySelector('.hour-num');
		this.minutesDisplay = document.querySelector('.minute-num');

		

		
		this._main();
	}

	addZero(n) {
	    return (n < 10) ? ("0" + n) : n;
	}

	showElement(element, classNameEl,  button, classNameBtn){
		element.classList.toggle(classNameEl);
		button.classList.toggle(classNameBtn);
	}

	populateTable(arr){
		const html = arr.map(element => {
			return `<div class="table__element">${this.addZero(element)}</div>`
		}).join("");
		return html;
	}

	populateList(hours, minutes, amPm){
		let html = "";
		for(let hour in hours){
			minutes.map(quater => html += `<li data-hour="${this.addZero(hours[hour])}" data-minute="${this.addZero(quater)}">${this.addZero(hours[hour])} : ${this.addZero(quater)} ${amPm}</li>`)
		}
		return html;
	}

	changeTimeFromTable(elementToChange, table, clickedElement){
		elementToChange.innerHTML = clickedElement.innerHTML;
		table.forEach(time => time.classList.contains("time--active") ? time.classList.remove('time--active') : null)
		clickedElement.classList.add('time--active');
	
	}


	_main(){
		this.hoursTable.innerHTML = this.populateTable(this.hours);
		this.minutesTable.innerHTML = this.populateTable(this.minutes);
		this.timeList.innerHTML = this.populateList(this.hours, this.quaterHours, this.ampm.innerHTML);
		
		const tableElementHours = this.hoursTable.querySelectorAll('.table__element')		//these needs to be declared here because in constructor it is not populated yet
		const tableElementMinutes = this.minutesTable.querySelectorAll('.table__element')
		let listItems = this.timeList.querySelectorAll('li');
		
		this.timeWrapper.addEventListener('mouseenter', () => this.carets.forEach(caret => caret.classList.add('show-carets')))
		this.timeWrapper.addEventListener('mouseleave', () => this.carets.forEach(caret => caret.classList.remove('show-carets')))
		this.showTimeBtn.addEventListener("click", ()=>{
			this.showElement(this.timeGrid, "show-me", this.showTimeBtn, "body__style--icon--active")
			this.downCaretBtn.classList.contains("body__style--caret--active") ? this.showElement(this.timeList, "show-me", this.downCaretBtn, "body__style--caret--active") : null;
		});
		this.ampmSelector.addEventListener("click", () => {
			this.ampm.innerHTML === "AM" ? this.ampm.innerHTML = "PM" : this.ampm.innerHTML = "AM"
			this.timeList.innerHTML = this.populateList(this.hours, this.quaterHours, this.ampm.innerHTML);
			listItems = this.timeList.querySelectorAll('li');
			this.addListeners(listItems, tableElementHours, tableElementMinutes);
		});
		this.downCaretBtn.addEventListener("click", () => {
			this.showElement(this.timeList, "show-me", this.downCaretBtn, "body__style--caret--active")
			this.showTimeBtn.classList.contains("body__style--icon--active") ? this.showElement(this.timeGrid, "show-me", this.showTimeBtn, "body__style--icon--active") : null;
		});
		
		tableElementHours.forEach(hour => hour.addEventListener('click', () => {
			
			this.changeTimeFromTable(this.hoursDisplay, tableElementHours, hour);
		}))
		tableElementMinutes.forEach(minute => minute.addEventListener('click', () => {
			this.changeTimeFromTable(this.minutesDisplay, tableElementMinutes, minute);
		}))
		this.addListeners(listItems, tableElementHours, tableElementMinutes);
		this.carets.forEach(caret => caret.addEventListener('click', () => {
			const hourNumber = +this.hoursDisplay.innerHTML;
			const minuteNumber = +this.minutesDisplay.innerHTML;
			
			tableElementHours.forEach(time => time.classList.contains("time--active") ? time.classList.remove('time--active') : null)
			tableElementMinutes.forEach(time => time.classList.contains("time--active") ? time.classList.remove('time--active') : null)

			if("updatehour" in caret.dataset){
				let updatingHour = hourNumber + parseFloat(caret.dataset.updatehour);
				updatingHour > 12 ? updatingHour = 1 : null;
				updatingHour < 1 ? updatingHour = 12 : null;
				this.hoursDisplay.innerHTML = this.addZero(updatingHour);
			}else{
				let updatingMinute = minuteNumber + parseFloat(caret.dataset.updatemin);
				updatingMinute > 55 ? updatingMinute = 0 : null;
				updatingMinute < 0 ? updatingMinute = 55 : null;
				this.minutesDisplay.innerHTML = this.addZero(updatingMinute);
			}
			

		}))
		
	}
	//this function wass necessary in order to fix bug after changing innerhtml of list elements with AM/PM button... 
	addListeners(listItems, tableElementHours, tableElementMinutes){
		listItems.forEach(item => item.addEventListener("click", () => {
			this.hoursDisplay.innerHTML = item.dataset.hour;
			this.minutesDisplay.innerHTML = item.dataset.minute;
			this.timeList.classList.remove('show-me');
			this.downCaretBtn.classList.remove('body__style--caret--active');
			tableElementHours.forEach(time => time.classList.contains("time--active") ? time.classList.remove('time--active') : null)
			tableElementMinutes.forEach(time => time.classList.contains("time--active") ? time.classList.remove('time--active') : null)

		}))
	}
	//*******************************************
	//***********Changing time*******************
	//*******************************************

	changeTimeFromTable(elementToChange, table, clickedElement){
		elementToChange.innerHTML = clickedElement.innerHTML;
		table.forEach(time => time.classList.contains("time--active") ? time.classList.remove('time--active') : null)
		clickedElement.classList.add('time--active');	
	}



	_renderWidget(){
		let target = document.querySelector(this.target);
		target.innerHTML = `
		
	      <div class="timepickers__default">
	        <div class="default__heading">Default</div>
	        <div class="default__body">
	          
	            <div class="body__style body__style--icon"><i class="fa fa-clock-o" aria-hidden="true"></i></div>
	            <div class="time-wrapper">
	              <div class="body__style body__style--hours">
	                <div class="hour-num">12</div>
	                <i class="hover-carets fa fa-angle-up" data-updatehour="1" aria-hidden="true"></i>
	                <i class="hover-carets fa fa-angle-down" data-updatehour="-1" aria-hidden="true"></i>
	              </div>
	              <div class="body__style body__style--collon">:</div>
	              <div class="body__style body__style--minutes">
	                <div class="minute-num">00</div>
	                <i class="hover-carets fa fa-angle-up" data-updatemin="5" aria-hidden="true"></i>
	                <i class="hover-carets fa fa-angle-down" data-updatemin="-5" aria-hidden="true"></i>
	              </div>
	            </div>            
	            <div class="body__style body__style--caret"><i class="fa fa-caret-down" aria-hidden="true"></i></div>
	            
	          
	          
	          <div class="body__style body__style--ampm">
	            <div class="ampm">AM</div>
	            <div class="ampm-selector"><i class="fa fa-refresh" aria-hidden="true"></i></div>
	          </div>
	        </div>
	        <div class="select-time-list">
	              
	          <ul class="fill-me-up"></ul>
	        </div>
	        <div class="default__time-grid">
	          <div class="time-grid-heading">HOURS</div>
	          <hr class="line-break">
	          <div class="time-grid-table table--hours">
	            
	          </div>
	          <div class="time-grid-heading">MINUTES</div>
	          <hr class="line-break">
	          <div class="time-grid-table table--minutes">
	            
	          </div>
	        </div>
	          
	        
	      </div>
	    

		`;
	}
	
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Timepicker;


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Datepicker {
	constructor(args) {
		this.target = args.target;
		this._renderWidget();
		this.monthsBox = document.querySelector('.month-year-box');
		this.daysBox = document.querySelector('.datepicker__days');
		this.arrows = document.querySelectorAll('.arrow');
		this.restDays; //declaring these two because they need to be updated inside functions
		this.firstDay;
		this.dayElements;
		this.monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
		this.actualDate = new Date();
		this.initialYear = this.actualDate.getFullYear();
		this.initialMonth = this.monthNames[this.actualDate.getMonth()];
		this.days = [];
		this.lastUpdatedMonth = this.actualDate.getMonth();
		this.lastUpdatedYear = this.initialYear;
		this._initialState();
	}

	_addZero(n) {
		return (n < 10) ? ("0" + n) : n;
	}

	_initialState() {
		this.monthsBox.innerHTML = `${this.initialMonth} ${this.initialYear}`
		this.daysBox.innerHTML = this._populateDays(this.actualDate.getMonth(), this.initialYear);
		this._populateAllShiet();
		this.arrows.forEach(arrow => arrow.addEventListener('click', () => this._updateMonth(arrow)))
	}
	_populateAllShiet() {
		this.restDays = document.querySelectorAll('.rest-days') //here we are updating these two from top on page load and adding event listeners
		this.firstDay = document.querySelector('.first-day');
		this.restDays.forEach(day => day.addEventListener("click", () => { this._updateMonth(day) }));
		this.firstDay.addEventListener('click', () => { this._updateMonth(this.firstDay) });
		this.dayElements = document.querySelectorAll('.day-element');
		this.dayElements.forEach(day => day.addEventListener('click', () => {
			this.dayElements.forEach(element => element.classList.contains("highlight") ? element.classList.remove('highlight') : null)
			day.classList.add('highlight');
		}))
	}

	_getDaysInMonth(month, year) {
		return new Date(year, month, 0).getDate();
		// Here January is 0 based normally is 1 based
		// return new Date(year, month+1, 0).getDate();
	};

	_populateDays(month, year) {
		this.days = []; //reset days array because it will hold all days of months
		const getDays = this._getDaysInMonth(month + 1, year); //month + 1 because this function is taking real months and array is starting from 0
		this.days.push(this._getDaysInMonth(month, year)); //this is for first day-element from last month
		let html = "";
		for (let i = 1; i <= getDays; i++) {
			this.days.push(i);
		}
		html = this.days.map((day, i) => {
			if (i == 0) return `<div class='day-element first-day' data-update="-1">${this._addZero(day)}</div>`;
			return `<div class='day-element'>${this._addZero(day)}</div>`
		}).concat(this._fillRestDays()).join("");
		return html;
	}
	
	_fillRestDays() {
		this.restDays = [];
		for (let i = 1; i <= 35 - this.days.length; i++) {
			this.restDays.push(i);
		}
		let html = this.restDays.map(day => {
			return `<div class='day-element rest-days' data-update="1">${this._addZero(day)}</div>`
		})
		return html;
	}

	_updateMonth(arrow) {
		this.lastUpdatedMonth += parseFloat(arrow.dataset.update);
		if (this.lastUpdatedMonth == 12) {
			this.lastUpdatedYear++;
			this.lastUpdatedMonth = 0
		}
		if (this.lastUpdatedMonth == -1) {
			this.lastUpdatedYear--;
			this.lastUpdatedMonth = 11;
		}
		this._animate(arrow);
		setTimeout(() => {
			this.monthsBox.innerHTML = `${this.monthNames[this.lastUpdatedMonth]} ${this.lastUpdatedYear}`;
			this.daysBox.innerHTML = this._populateDays(this.lastUpdatedMonth, this.lastUpdatedYear);
			this._populateAllShiet();
		}, 150)
	}

	_animate(arrow) {
		if (arrow.dataset.update == "1") {
			this.daysBox.classList.add('transition');
			this.daysBox.classList.add('pre-animation-right-arrow');
			setTimeout(() => {
				this.daysBox.classList.remove('transition');
				this.daysBox.classList.remove('pre-animation-right-arrow');
				this.daysBox.classList.add('pre-animation-left-arrow');
				setTimeout(() => {
					this.daysBox.classList.add('transition');
					this.daysBox.classList.remove('pre-animation-left-arrow')

				}, 150)
			}, 150)
		}
		else {
			this.daysBox.classList.add('transition');
			this.daysBox.classList.add('pre-animation-left-arrow');
			setTimeout(() => {
				this.daysBox.classList.remove('transition');
				this.daysBox.classList.remove('pre-animation-left-arrow');
				this.daysBox.classList.add('pre-animation-right-arrow');
				setTimeout(() => {
					this.daysBox.classList.add('transition');
					this.daysBox.classList.remove('pre-animation-right-arrow')
				}, 150)
			}, 150)
		}
	}

	_renderWidget() {
		let target = document.querySelector(this.target);
		target.innerHTML = `
			
		         <div class="wrapper">
		             <div class="datepicker__months">
		                 <div class="month arrow left-arrow" data-update="-1"><</div>
		                 <div class="month month-year-box"></div>
		                 <div class="month arrow right-arrow" data-update="1">></div>
		             </div>
		             <div class="datepicker__days"></div>
		         </div>
		     
		`;
	}



}
/* harmony export (immutable) */ __webpack_exports__["a"] = Datepicker;




/***/ })
/******/ ]);